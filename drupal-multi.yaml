heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy Load Balanced Drupal servers with a
  backend database server.

parameter_groups:

- label: Server Settings
  parameters:
  - image

- label: Web Server Settings
  parameters:
  - master_server_flavor
  - web_server_count
  - web_server_flavor

- label: Database Settings
  parameters:
  - database_flavor
  - database_size

- label: Drupal Settings
  parameters:
  - domain
  - username

- label: rax-dev-params
  # These are parameters that will not be displayed in the portal. The purpose
  # of these parameters are for users who are developing or testing newer or
  # different setups. If any of these parameters are changed, there is a good
  # chance this stack will fail to properly deploy.
  parameters:
  - child_template
  - load_balancer_hostname
  - web_server_hostnames
  - master_server_hostname
  - database_name
  - database_username

parameters:

  # Server settings
  load_balancer_hostname:
    label: Load Balancer Hostname
    description: Hostname for the Cloud Load Balancer
    type: string
    default: Drupal-Load-Balancer
    constraints:
    - length:
        min: 1
        max: 64
    - allowed_pattern: "^[a-zA-Z][a-zA-Z0-9-]*$"
      description: |
        Must begin with a letter and contain only alphanumeric characters.

  master_server_hostname:
    label: Server Name
    description: Hostname to use for your Drupal web-master server.
    type: string
    default: Drupal-Master
    constraints:
    - length:
        min: 1
        max: 64
    - allowed_pattern: "^[a-zA-Z][a-zA-Z0-9-]*$"
      description: |
        Must begin with a letter and contain only alphanumeric characters.

  web_server_hostnames:
    label: Server Name
    description: Hostname to use for all additional Drupal web nodes
    type: string
    default: Drupal-Web%index%
    constraints:
    - length:
        min: 1
        max: 64
    - allowed_pattern: "^[a-zA-Z][a-zA-Z0-9%-]*$"
      description: |
        Must begin with a letter and contain only alphanumeric characters.

  web_server_count:
    label: Web Server Count
    description: Number of web servers to deploy in addition to the web-master
    type: number
    default: 1
    constraints:
    - range:
        min: 0
        max: 7
      description: Must be between 0 and 7 servers.

  image:
    label: Operating System
    description: |
      Required: Server image used for all servers that are created as a part of
      this deployment.
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)
      description: Must be a supported operating system.

  master_server_flavor:
    label: Master Server Size
    description: |
      Cloud Server size to use for the web-master node. The size should be at
      least one size larger than what you use for the web nodes. This server
      handles all admin calls and will ensure files are synced across all
      other nodes.
    type: string
    default: 2 GB General Purpose v1
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  web_server_flavor:
    label: Node Server Size
    description: |
      Cloud Server size to use on all of the additional web nodes.
    type: string
    default: 2 GB General Purpose v1
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      - 1GB Standard Instance
      - 2GB Standard Instance
      - 4GB Standard Instance
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      description: |
        Must be a valid Rackspace Cloud Server flavor for the region you have
        selected to deploy into.

  # Drupal settings
  domain:
    label: Site Domain
    description: Domain to be used with this Drupal site
    type: string
    default: "example.com"
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name

  username:
    label: Username
    description: "Username for the Drupal admin login"
    type: string
    default: admin
    constraints:
    - allowed_pattern: "^(.){1,16}$"
      description: |
        Must be shorter than 16 characters, this is due to MySQL's maximum
        username length.

  # Database and system user configuration
  database_name:
    label: Database Name
    description: Drupal database name
    type: string
    default: drupal
    constraints:
    - allowed_pattern: "^[0-9a-zA-Z$_]{1,64}$"
      description: |
        Maximum length of 64 characters, may only contain letters, numbers, and
        underscores.

  database_username:
    label: Database Username
    description: Drupal database username
    type: string
    default: drupal
    constraints:
    - allowed_pattern: "^[0-9a-zA-Z$_]{1,64}$"
      description: |
        Maximum length of 64 characters, may only contain letters, numbers, and
        underscores.

  database_flavor:
    label: Cloud Database Size
    description: |
      Required: Rackspace Cloud Database Flavor. Size is based on amount of RAM
      for the provisioned instance.
    type: string
    default: 1GB Instance
    constraints:
    - allowed_values:
      - 512MB Instance
      - 1GB Instance
      - 2GB Instance
      - 4GB Instance
      - 8GB Instance
      - 16GB Instance
      - 32GB Instance
      - 64GB Instance
      description: |
        Must be a valid Rackspace Cloud Database flavor for the region you have
        selected to deploy into.

  datastore_version:
    label: MySQL Version
    type: string
    description: |
      Required: Version of MySQL to run on the Cloud Databases instance.
    default: "5.6"
    constraints:
    - allowed_values:
      - "5.6"
      - "5.1"

  database_size:
    label: Database Size
    description: |
      Required: Amount of storage required for your Rackspace Cloud Database,
      in GB.
    type: number
    default: 10
    constraints:
    - range:
        min: 10
        max: 300
    description: |
        Database instance size, in GB. min 10, max 300

  ## The below parameters are for development purposes. Use the default
  ## settings for these parameters when attempting to deploy this stack.
  child_template:
    label: Child Template
    description: |
      Location of the child template to use for the Drupal web servers
    type: string
    default: https://raw.githubusercontent.com/rackspace-orchestration-templates/drupal-multi/master/drupal-single.yaml

resources:
  # Random password generation
  database_password:
    type: "OS::Heat::RandomString"
    properties:
      length: 16
      sequence: lettersdigits

  # SSH KEYS
  sync_key:
    type: "OS::Nova::KeyPair"
    properties:
      name:
        str_replace:
          template: "%stack_id%-sync"
          params:
            "%stack_id%": { get_param: "OS::stack_id" }
      save_private_key: true

  ssh_key:
    type: "OS::Nova::KeyPair"
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true

  # Database instance
  database_server:
    type: OS::Trove::Instance
    properties:
      name:
        str_replace:
          template: "drupal_db_%stackid%"
          params:
            "%stackid%": { get_param: "OS::stack_id" }
      flavor: { get_param: database_flavor }
      size: { get_param: database_size }
      datastore_type: mysql
      datastore_version: { get_param: datastore_version }
      databases:
      - name: { get_param: database_name }
      users:
      - name: { get_param: database_username }
        password: { get_resource: database_password }
        databases: [ { get_param: database_name } ]

  # Server resources
  load_balancer:
    type: "Rackspace::Cloud::LoadBalancer"
    depends_on:
    - master_server
    - web_servers
    properties:
      name: { get_param: load_balancer_hostname }
      nodes:
      - addresses: [ { get_attr: [master_server, networks, private, 0] } ]
        port: 80
        condition: ENABLED
      - addresses: { get_attr: [web_servers, private_ip] }
        port: 80
        condition: ENABLED
      healthMonitor:
        type: HTTP
        delay: 10
        timeout: 5
        attemptsBeforeDeactivation: 2
        path: /
        statusRegex: ^[23]0[0-2]$
      port: 80
      protocol: HTTP
      algorithm: ROUND_ROBIN
      contentCaching: ENABLED
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4
      metadata:
        rax-heat: { get_param: "OS::stack_id" }

  master_server:
    type: "OS::Nova::Server"
    properties:
      name: { get_param: master_server_hostname }
      flavor: { get_param: master_server_flavor }
      image: { get_param: image }
      key_name: { get_resource: ssh_key }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            package_update: true
            packages:
              - git
            write_files:
            # Set salt-minion to only use local resources
              - path: /etc/salt/minion.d/local.conf
                permissions: '0644'
                content: |
                  file_client: local
                  mysql.default_file: '/etc/mysql/debian.cnf'
            # Write out Pillar top.sls
              - path: /srv/pillar/top.sls
                permissions: '0600'
                content: |
                  base:
                    '*':
                      - localhost
            # Write out State top.sls
              - path: /srv/salt/top.sls
                permissions: '0644'
                content: |
                  base:
                    '*':
                      - salt-minion
                      - apache
                      - composer
                      - drush
                      - php
                      - drupal
            # Example Pillar Data using %value% notation
            # See example pillar data from states repository.
              - path: /srv/pillar/localhost.sls
                permissions: '0600'
                content: |
                  apache:
                    vhosts:
                      - domain: %domain%
                        docroot: /var/www/%domain%
                  drupal:
                    domain: %domain%
                    admin_user: %username%
                    admin_pass: %drupal_password%
                    db_host: %database_hostname%
                    db_name: %database_name%
                    db_user: %database_username%
                    db_pass: %database_password%
            # Salt Bootstrap script
              - path: /tmp/heat/salt_run.sh
                permissions: '0500'
                content: |
                  #!/bin/bash
                  # Install salt-minion using Salt Bootstrap
                  curl -L https://bootstrap.saltstack.com | sudo sh -s --
                  salt-minion --versions
                  # Clone down States
                  mkdir -p /tmp/heat/states
                  git clone https://github.com/rackspace-orchestration-templates/salt-states.git /tmp/heat/states
                  cp -nr /tmp/heat/states/* /srv/salt/
                  # Run local highstate
                  salt-call --local state.highstate
                  # Open and Enable ufw
                  ufw allow 443
                  ufw allow 80
                  ufw allow 22
                  ufw --force enable
                  wc_notify --data-binary '{"status": "SUCCESS"}'
            runcmd:
              - /tmp/heat/salt_run.sh
          params:
            wc_notify: { get_attr: ['wait_condition_handle', 'curl_cli'] }
            "%domain%": { get_param: domain }
            "%username%": { get_param: username }
            "%drupal_password%": { get_attr: [database_password, value] }
            "%database_name%": { get_param: database_name }
            "%database_hostname%": { get_attr: [database_server, hostname] }
            "%database_username%": { get_param: database_username }
            "%database_password%": { get_attr: [database_password, value] }

  web_servers:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: { get_param: web_server_count }
      resource_def:
        type: { get_param: child_template }
        properties:
          server_hostname: { get_param: web_server_hostnames }
          image: { get_param: image }
          flavor: { get_param: web_server_flavor }
          domain: { get_param: domain }
          username: { get_param: username }
          drupal_password: { get_attr: [database_password, value] }
          database_name: { get_param: database_name }
          database_hostname: { get_attr: [database_server, hostname] }
          database_username: { get_param: database_username }
          database_password: { get_attr: [database_password, value] }
          ssh_keypair_name: { get_resource: ssh_key }
          ssh_private_key: { get_attr: [ssh_key, private_key] }
          parent_stack_id: { get_param: "OS::stack_id" }
          lsync_pub: { get_attr: [sync_key, public_key]}
          varnish_master_backend: { get_attr: [master_server, networks, private, 0] }

outputs:
  private_key:
    value: { get_attr: [ssh_key, private_key] }
    description: SSH Private IP

  load_balancer_ip:
    value: { get_attr: [load_balancer, PublicIp] }
    description: Load Balancer IP

  drupal_url:
    description: Drupal URL
    value:
      str_replace:
        template: "http://%ip%"
        params:
          "%ip%": { get_attr: [load_balancer, PublicIp] }

  drupal_user:
    value: { get_param: username }
    description: Drupal User

  drupal_password:
    value: { get_attr: [database_password, value] }
    description: Drupal Password

  web_master_ip:
    value: { get_attr: [master_server, accessIPv4] }
    description: Web-Master IP

  web_ips:
    value: { get_attr: [web_servers, accessIPv4] }
    description: Web Server IPs
